#Использовать 1commands
#Использовать logos

#Область Глобальные_переменные

Перем м_оЛог;
Перем сВерсияСкрипта;
Перем сДатаСкрипта;

#КонецОбласти

Функция main()
	Перем чРезультат, Команда, сСтрокаКоманды, сТекстСообщения, бТолькоОстановить;
	Перем б1СРаботает, бPGРаботает, сПароль, сПараметр, мАргументы, чЭлемент;
	Перем ОК, НЕОК;
	
	// КОНСТАНТЫ
	ОК = 0; // успешное завершение скрипта
	НЕОК = 1; // скрипт закончен с ошибкой

	НастроитьЛогирование();
	м_оЛог.Информация("Старт SRVMNG " + Строка(ТекущаяУниверсальнаяДата()));
	
	// разбор параметров
	// TODO переделать на выбор действия
	// -stop : Остановить работающие сервисы
	// -sp <pass> : (--SudoPassword) Пароль пользователя для выполнения операций с повышенными привелегиями
	// -v : (--verbosity) содержимое лога выводить в окно терминала, логирование в файл при этом не отключается
	мАргументы = АргументыКоманднойСтроки;
	Если мАргументы.Количество() = 0 Тогда
		м_оЛог.Предупреждение("Не указаны аргументы командной строки");
		Сообщить("Аргументы:
			| -sp <pass> (обязательно) пароль пользователя для выполнения операций с повышенными привелегиями
			| -stop (необязательно) остановить работающие сервисы
			| -v (необязательно) содержимое лога выводить и в окно терминала", СтатусСообщения.Внимание);
		Возврат НЕОК;
	КонецЕсли;
	
	бТолькоОстановить = Ложь;
	сПароль = "";
	Для чЭлемент = 0 По мАргументы.Количество() - 1 Цикл
		Если НРег(мАргументы[чЭлемент]) = "-stop" Тогда
			бТолькоОстановить = Истина;
		КонецЕсли;
		
		Если НРег(мАргументы[чЭлемент]) = "-sp" ИЛИ НРег(мАргументы[чЭлемент]) = "--SudoPassword" Тогда
			Попытка
				сПароль = мАргументы[чЭлемент + 1];
			Исключение
				м_оЛог.Предупреждение("Не указан пароль пользователя -sp <pass>");
				Возврат НЕОК;
			КонецПопытки;
			чЭлемент = чЭлемент + 1;
		КонецЕсли;
		
		Если НРег(мАргументы[чЭлемент]) = "-v" ИЛИ НРег(мАргументы[чЭлемент]) = "--verbosity"Тогда
			ДобавитьВыводВКонсоль();
		КонецЕсли;
	КонецЦикла;

	// наличие сервиса srv1cv83 и его текущий статус
	чРезультат = Работает1С();
	Если чРезультат = 2 Тогда
		Возврат НЕОК;
	ИначеЕсли чРезультат = 1 Тогда
		б1СРаботает = Ложь;
	Иначе
		б1СРаботает = Истина;
	КонецЕсли;
	
	// наличие сервиса postgresql и его текущий статус
	чРезультат = РаботаетPG();
	Если чРезультат = 2 Тогда
		Возврат НЕОК;
	ИначеЕсли чРезультат = 1 Тогда
		бPGРаботает = Ложь;
	Иначе
		бPGРаботает = Истина;
	КонецЕсли;
	
	// остановка всех работающих сервисов, если передан параметр -stop
	Если бТолькоОстановить Тогда
		Если б1СРаботает Тогда
			Стоп1С(сПароль);
		Иначе
			м_оЛог.Информация("Сервис srv1cv83 уже остановлен");
		КонецЕсли;
		
		Если бPGРаботает Тогда
			СтопPG(сПароль);
		Иначе
			м_оЛог.Информация("Сервис postgresql уже остановлен");
		КонецЕсли;
		
		Возврат ОК;
	КонецЕсли;
	
	// запуск сервиса postgresql, если нужно
	Если НЕ бPGРаботает Тогда
		Если НЕ СтартPG(сПароль) Тогда
			Возврат НЕОК;
		КонецЕсли;
	Иначе
		м_оЛог.Информация("Сервис postgresql уже работает");
	КонецЕсли;
	
	// запуск сервиса srv1cv83, если нужно
	Если НЕ б1СРаботает Тогда
		Если НЕ Старт1С(сПароль) Тогда
			Возврат НЕОК;
		КонецЕсли;
	Иначе
		м_оЛог.Информация("Сервис srv1cv83 уже работает");
	КонецЕсли;
	
	м_оЛог.Закрыть();
	Возврат ОК;
КонецФункции

Процедура НастроитьЛогирование()
	Перем СпособВывода, сИмяФайлаЛога, сПутьКСценарию, сПолныйПутьКЛогу;

	сПутьКСценарию = СтартовыйСценарий().Каталог;
	сИмяФайлаЛога = "srvmng.log";
	сПолныйПутьКЛогу = ОбъединитьПути(сПутьКСценарию, сИмяФайлаЛога);

	м_оЛог = Логирование.ПолучитьЛог("srvmng.app.message");
	м_оЛог.УстановитьУровень(УровниЛога.Информация);
	СпособВывода = Новый ВыводЛогаВФайл();
	м_оЛог.ДобавитьСпособВывода(СпособВывода);
	СпособВывода.ОткрытьФайл(сПолныйПутьКЛогу);

КонецПроцедуры

Процедура ДобавитьВыводВКонсоль()
	
	СпособВывода = Новый ВыводЛогаВКонсоль();
	м_оЛог.ДобавитьСпособВывода(СпособВывода);

КонецПроцедуры

#Область Управление_PG

Функция СтартPG(сПароль)
	Перем чРезультат, Команда, сСтрокаКоманды;
	Перем бВыполненоБезОшибок;
	
	бВыполненоБезОшибок = Ложь;
	
	м_оЛог.Информация("Запуск сервиса postgresql");
	Команда = Новый Команда();
	сСтрокаКоманды = "echo %1 | sudo -S service";
	сСтрокаКоманды = СтрШаблон(сСтрокаКоманды, сПароль);
	Команда.УстановитьСтрокуЗапуска(сСтрокаКоманды);
	Команда.ДобавитьПараметр("postgresql");
	Команда.ДобавитьПараметр("start");
	чРезультат = Команда.Исполнить();
	Если чРезультат <> 0 Тогда
		м_оЛог.Ошибка("Ошибка при запуске сервиса postgresql");
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	м_оЛог.Информация("Сервис postgresql запущен");
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

Функция СтопPG(сПароль)
	Перем Команда, сСтрокаКоманды, чРезультат;
	Перем бВыполненоБезОшибок;

	бВыполненоБезОшибок = Ложь;

	м_оЛог.Информация("Остановка сервиса postgresql");
	Команда = Новый Команда();
	сСтрокаКоманды = "echo %1 | sudo -S service";
	сСтрокаКоманды = СтрШаблон(сСтрокаКоманды, сПароль);
	Команда.УстановитьСтрокуЗапуска(сСтрокаКоманды);
	Команда.ДобавитьПараметр("postgresql");
	Команда.ДобавитьПараметр("stop");
	чРезультат = Команда.Исполнить();
	Если чРезультат <> 0 Тогда
		м_оЛог.Ошибка("Ошибка при остановке сервиса postgresql");
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	м_оЛог.Информация("Сервис postgresql остановлен");
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции 

// Проверка существования и статуса сервиса postgresql
//
//  Возвращаемое значение:
//   число - статус сервиса:
//      0 - есть и работает
//      1 - есть н не работает
//      2 - сервис не установлен или ошибка
//
Функция РаботаетPG()
	Перем Команда, сСтрокаКоманды, чРезультат, чPGРаботает;

	Команда = Новый Команда();
	сСтрокаКоманды = "service";
	Команда.УстановитьКоманду(сСтрокаКоманды);
	Команда.ДобавитьПараметр("postgresql");
	Команда.ДобавитьПараметр("status");
	
	чРезультат = Команда.Исполнить();
	Если чРезультат <> 0 И чРезультат <> 3 Тогда
		Если Найти(Команда.ПолучитьВывод(), "unrecognized service") Тогда
			м_оЛог.Предупреждение("Сервис postgresql не установлен");
		Иначе
			м_оЛог.Ошибка("Ошибка при выполнении команды ""service postgresql status""");
		КонецЕсли;
		м_оЛог.Ошибка("Ошибка при выполнении команды ""service postgresql status""");
		
		чPGРаботает = 2;
		Возврат чPGРаботает;
	КонецЕсли;
	
	Если Найти(Команда.ПолучитьВывод(), "down") Тогда
		чPGРаботает = 1;
		Возврат чPGРаботает;
	КонецЕсли;
	
	чPGРаботает = 0;
	Возврат чPGРаботает;
КонецФункции

#КонецОбласти

#Область Управление_1С

Функция Старт1С(сПароль)
	Перем Команда, сСтрокаКоманды, чРезультат;
	Перем бВыполненоБезОшибок;
	
	бВыполненоБезОшибок = Ложь;
	
	м_оЛог.Информация("Запуск сервиса srv1cv83");
	Команда = Новый Команда();
	сСтрокаКоманды = "echo %1 | sudo -S service";
	сСтрокаКоманды = СтрШаблон(сСтрокаКоманды, сПароль);
	Команда.УстановитьСтрокуЗапуска(сСтрокаКоманды);
	Команда.ДобавитьПараметр("srv1cv83");
	Команда.ДобавитьПараметр("start");
	чРезультат = Команда.Исполнить();
	Если чРезультат <> 0 Тогда
		м_оЛог.Ошибка("Ошибка при запуске сервиса srv1cv83");
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	м_оЛог.Информация("Сервис srv1cv83 запущен");
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

Функция Стоп1С(сПароль)
	Перем Команда, сСтрокаКоманды, чРезультат;
	Перем бВыполненоБезОшибок;
	
	бВыполненоБезОшибок = Ложь;

	м_оЛог.Информация("Остановка сервиса srv1cv83");
	Команда = Новый Команда();
	сСтрокаКоманды = "echo %1 | sudo -S service";
	сСтрокаКоманды = СтрШаблон(сСтрокаКоманды, сПароль);
	Команда.УстановитьСтрокуЗапуска(сСтрокаКоманды);
	Команда.ДобавитьПараметр("srv1cv83");
	Команда.ДобавитьПараметр("stop");
	чРезультат = Команда.Исполнить();
	Если чРезультат <> 0 Тогда
		м_оЛог.Ошибка("Ошибка при остановке сервиса srv1cv83");
	КонецЕсли;
	
	м_оЛог.Информация("Сервис srv1cv83 остановлен");
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

// Проверка существования и статуса сервиса srv1cv83
//
//  Возвращаемое значение:
//   число - статус сервиса:
//      0 - есть и работает
//      1 - есть н не работает
//      2 - сервис не установлен или ошибка
//
Функция Работает1С()
	Перем Команда, сСтрокаКоманды, чРезультат, ч1СРаботает;

	Команда = Новый Команда();
	сСтрокаКоманды = "service";
	Команда.УстановитьКоманду(сСтрокаКоманды);
	Команда.ДобавитьПараметр("srv1cv83");
	Команда.ДобавитьПараметр("status");
	
	чРезультат = Команда.Исполнить();
	Если чРезультат <> 0 Тогда
		Если Найти(Команда.ПолучитьВывод(), "unrecognized service") Тогда
			м_оЛог.Предупреждение("Сервис srv1cv83 не установлен");
		Иначе
			м_оЛог.Ошибка("Ошибка при выполнении команды ""service srv1cv83 status""");
		КонецЕсли;
		
		ч1СРаботает = 2;
		Возврат ч1СРаботает;
	КонецЕсли;
	
	Если Найти(Команда.ПолучитьВывод(), "NOT STARTED") Тогда
		ч1СРаботает = 1;
		Возврат ч1СРаботает;
	КонецЕсли;

	ч1СРаботает = 0;
	Возврат ч1СРаботает;
КонецФункции

#КонецОбласти

main();
сВерсияСкрипта = "1-02";
сДатаСкрипта = "29.03.2020";